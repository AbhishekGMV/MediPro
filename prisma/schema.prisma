// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Doctor {
  id           String         @id @default(uuid())
  name         String
  phone        String         @unique
  imageUrl     String?
  signatureUrl String?
  role         String
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Slot         Slot[]
  Consultation Consultation[]

  Appointment Appointment[]
}

model Patient {
  id           String         @id @default(uuid())
  name         String
  gender       String
  phone        String         @unique
  imageUrl     String
  age          Int
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Appointment  Appointment[]
  Consultation Consultation[]
}

model Availability {
  id        Int      @id @default(autoincrement())
  doctorId  String
  date      DateTime // Date for which the availability is set
  startTime DateTime // Start time of availability
  endTime   DateTime // End time of availability
  slots     Slot[] // Reference to generated slots

  @@unique([doctorId, date]) // Ensure one availability record per doctor per day
}

model Slot {
  id             Int            @id @default(autoincrement())
  doctor         Doctor         @relation(fields: [doctorId], references: [id])
  Availability   Availability[]
  availabilityId Int // Reference to availability
  startTime      DateTime // Start time of the slot
  endTime        DateTime // End time of the slot
  isBooked       Boolean        @default(false)
  doctorId       String

  @@unique([availabilityId, startTime]) // Ensure unique slots for each availability
  @@index([doctorId])
}

model Appointment {
  id           String         @id @default(uuid())
  doctor       Doctor         @relation(fields: [doctorId], references: [id])
  patient      Patient        @relation(fields: [patientId], references: [id])
  consultation Consultation[]
  patientId    String
  doctorId     String
  slotId       Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  status       String

  @@index([patientId])
  @@index([doctorId])
  @@index([slotId])
}

model Consultation {
  id                  String      @id @default(uuid())
  doctor              Doctor      @relation(fields: [doctorId], references: [id])
  patient             Patient     @relation(fields: [patientId], references: [id])
  appointment         Appointment @relation(fields: [appointmentId], references: [id])
  doctorId            String
  patientId           String
  appointmentId       String
  prescriptionUrl     String
  prescriptionContent String
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@index([doctorId])
  @@index([patientId])
  @@index([appointmentId])
}
