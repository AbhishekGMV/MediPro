// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Doctor {
  id           String         @id @default(uuid())
  name         String
  gender       String
  phone        String         @unique
  imageUrl     String?
  signatureUrl String?
  role         String
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Slot         Slot[]
  Consultation Consultation[]
  Appointment  Appointment[]
  Availability Availability[]
}

model Patient {
  id           String         @id @default(uuid())
  name         String
  gender       String
  phone        String         @unique
  imageUrl     String?
  age          Int
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Appointment  Appointment[]
  Consultation Consultation[]
}

model Availability {
  id        Int      @id @default(autoincrement())
  doctorId  String
  startTime String
  endTime   String
  weekStart String
  dayOfWeek String
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([doctorId, dayOfWeek])
}

model Slot {
  id             Int           @id @default(autoincrement())
  doctor         Doctor        @relation(fields: [doctorId], references: [id])
  availabilityId Int
  startTime      String
  endTime        String
  dayOfWeek      String
  isBooked       Boolean       @default(false)
  doctorId       String
  Appointment    Appointment[]

  @@unique([availabilityId, startTime])
  @@index([doctorId])
}

model Appointment {
  id           String         @id @default(uuid())
  doctor       Doctor         @relation(fields: [doctorId], references: [id])
  patient      Patient        @relation(fields: [patientId], references: [id])
  consultation Consultation[]
  slot         Slot           @relation(fields: [slotId], references: [id])
  patientId    String
  doctorId     String
  slotId       Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  status       String

  @@index([patientId])
  @@index([doctorId])
  @@index([slotId])
}

model Consultation {
  id                  String      @id @default(uuid())
  doctor              Doctor      @relation(fields: [doctorId], references: [id])
  patient             Patient     @relation(fields: [patientId], references: [id])
  appointment         Appointment @relation(fields: [appointmentId], references: [id])
  doctorId            String
  patientId           String
  appointmentId       String
  prescriptionUrl     String?
  prescriptionContent String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@unique([doctorId, appointmentId])
  @@index([doctorId])
  @@index([patientId])
  @@index([appointmentId])
}
